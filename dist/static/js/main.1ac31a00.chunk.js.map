{"version":3,"sources":["layouts/HomeLayout.js","layouts/BlankLayout.js","routes/index.js","App.js","serviceWorker.js","index.js","stores/FooStore.js","stores/NewStore.js","stores/index.js"],"names":["React","memo","props","route","className","to","activeClassName","renderRoutes","routes","Layout","SuspenseComponent","Component","fallback","About","lazy","Count","New","component","BlankLayout","path","HomeLayout","exact","name","render","App","of","stores","FooStore","Boolean","window","location","hostname","match","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","useState","counter","setCounter","reset","NewStore","title","this","observable","action","createContext"],"mappings":"qOAqBeA,UAAMC,MAfrB,SAAcC,GAAQ,IACZC,EAAUD,EAAVC,MAER,OACE,uBAAQC,UAAU,QAChB,4BAAQA,UAAU,eAChB,kBAAC,IAAD,CAASC,GAAG,SAASC,gBAAgB,YAArC,gBACA,kBAAC,IAAD,CAASD,GAAG,SAASC,gBAAgB,YAArC,gBACA,kBAAC,IAAD,CAASD,GAAG,OAAOC,gBAAgB,YAAnC,iBAEDC,YAAaJ,EAAMK,YCXXC,EAFA,SAAC,GAAD,IAAGN,EAAH,EAAGA,MAAH,OAAe,oCAAGI,YAAaJ,EAAMK,UCE9CE,EAAoB,SAAAC,GAAS,OAAI,SAAAT,GACrC,OACE,kBAAC,WAAD,CAAUU,SAAU,MAClB,kBAACD,EAAcT,MAKfW,EAAQC,gBAAK,kBAAM,iCACnBC,EAAQD,gBAAK,kBAAM,uDACnBE,EAAMF,gBAAK,kBAAM,uDAGR,GACb,CACEG,UAAWC,EACXV,OAAQ,CACN,CACEW,KAAM,IACNF,UAAWG,EACXZ,OAAQ,CACN,CACEW,KAAM,IACNE,OAAO,EACPC,KAAM,eACNC,OAAQ,kBAAM,kBAAC,IAAD,CAAUlB,GAAI,aAE9B,CACEc,KAAM,SACNG,KAAM,eACNL,UAAWP,EAAkBG,IAE/B,CACEM,KAAM,OACNG,KAAM,eACNL,UAAWP,EAAkBM,IAE/B,CACEG,KAAM,SACNG,KAAM,eACNL,UAAWP,EAAkBK,S,eCzB1BS,MAVf,WACE,OACE,kBAAC,WAAD,CAAUC,GAAIC,IAAOC,UACnB,kBAAC,IAAD,KACGpB,YAAaC,MCFFoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNT,iBAAO,kBAAC,EAAD,MAASU,SAASC,eAAe,SD8HlC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mDE3HbjB,IAZf,WAAqB,IAAD,EACYkB,mBAAS,GADrB,mBACXC,EADW,KACFC,EADE,KAKlB,MAAO,CACLD,UACAC,aACAC,MANF,WACED,EAAW,O,wGCFTE,G,oIAGaC,GACfC,KAAKD,MAAQA,M,wCAHdE,K,wEAAmB,M,oCAEnBC,K,wEAKYC,0BAAc,IAAIL,GCRlB,KACbtB,aACAsB,a","file":"static/js/main.1ac31a00.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { renderRoutes } from \"react-router-config\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Layout } from 'antd';\r\nimport './layout.less'\r\n\r\nfunction Home(props) {\r\n  const { route } = props;\r\n\r\n  return (\r\n    <Layout className=\"page\">\r\n      <header className=\"page_header\">\r\n        <NavLink to=\"/about\" activeClassName=\"selected\">首页</NavLink>\r\n        <NavLink to=\"/count\" activeClassName=\"selected\">计数</NavLink>\r\n        <NavLink to=\"/new\" activeClassName=\"selected\">新闻</NavLink>\r\n      </header>\r\n      {renderRoutes(route.routes)}\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default React.memo(Home);\r\n","import React from \"react\";\r\nimport { renderRoutes } from \"react-router-config\";\r\n\r\nconst Layout = ({ route }) => <>{renderRoutes(route.routes)}</>;\r\n\r\nexport default Layout;","import React, { lazy, Suspense } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport HomeLayout from \"../layouts/HomeLayout\";\r\nimport BlankLayout from \"../layouts/BlankLayout\";\r\n\r\nconst SuspenseComponent = Component => props => {\r\n  return (\r\n    <Suspense fallback={null}>\r\n      <Component {...props}></Component>\r\n    </Suspense>\r\n  )\r\n}\r\n\r\nconst About = lazy(() => import(\"../examples/About\"));\r\nconst Count = lazy(() => import(\"../examples/count\"));\r\nconst New = lazy(() => import(\"../examples/New\"));\r\n\r\n\r\nexport default [\r\n  {\r\n    component: BlankLayout,\r\n    routes: [\r\n      {\r\n        path: \"/\",\r\n        component: HomeLayout,\r\n        routes: [\r\n          {\r\n            path: \"/\",\r\n            exact: true,\r\n            name: '首页',\r\n            render: () => <Redirect to={\"/about\"} />\r\n          },\r\n          {\r\n            path: \"/about\",\r\n            name: '关于',\r\n            component: SuspenseComponent(About),\r\n          },\r\n          {\r\n            path: \"/new\",\r\n            name: '新闻',\r\n            component: SuspenseComponent(New),\r\n          },\r\n          {\r\n            path: \"/count\",\r\n            name: '计数',\r\n            component: SuspenseComponent(Count),\r\n            // routes: [\r\n            //   {\r\n            //     path: \"/recommend/:id\",\r\n            //     component: SuspenseComponent(Count)\r\n            //   }\r\n            // ]\r\n          },\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n]","import React from 'react';\nimport { Provider } from 'reto'\nimport {\n  HashRouter as Router,\n} from 'react-router-dom';\nimport { renderRoutes } from \"react-router-config\";\nimport routes from \"./routes\";\nimport stores from './stores'\nimport './App.css';\n\nfunction App() {\n  return (\n    <Provider of={stores.FooStore}>\n      <Router>\n        {renderRoutes(routes)}\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nrender(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {useState} from 'react'\r\n\r\nfunction FooStore() {\r\n  const [counter, setCounter] = useState(0)\r\n  function reset() {\r\n    setCounter(0)\r\n  }\r\n  return {\r\n    counter,\r\n    setCounter,\r\n    reset,\r\n  }\r\n}\r\n\r\nexport default FooStore","import { createContext } from \"react\";\r\nimport { observable, action } from \"mobx\";\r\n\r\nclass NewStore{\r\n  @observable title = ''\r\n\r\n  @action setTitle(title){\r\n    this.title = title\r\n  }\r\n}\r\n\r\nexport default createContext(new NewStore())","import FooStore from './FooStore'\r\nimport NewStore from './NewStore'\r\n\r\nexport default {\r\n  FooStore,\r\n  NewStore\r\n}"],"sourceRoot":""}